 🔄 单体架构开发路线图改进方案

  核心改进原则

  1. 增量式数据库设计 + 核心表先行
  2. 领域模型优先于基础架构实现
  3. 保持业务功能依赖关系的正确性
  4. 移除不适用的功能模块

  ---
  📋 改进后的第一阶段：数据层与基础架构（10-12周）

  1.1 核心数据库架构设计（2周）【保持不变，这是正确的】

  - ✅ 用户核心表设计
  - ✅ 系统配置表设计
  - ✅ 审计和日志表设计
  - ✅ 数据库架构规范制定

  1.2 领域模型设计（2周）【从第3位提前到第2位】

  - ✅ 用户领域模型
  - ✅ 资源领域模型
  - ✅ 内容领域模型
  - ✅ VIP领域模型

  理由：基础架构的实现需要依赖领域模型的接口定义

  1.3 基础架构层（2周）【从第2位调整到第3位】

  - ✅ 核心配置模块
  - ✅ 缓存基础设施设计（包含Redis配置）
  - ✅ 数据访问基础架构
  - ✅ 安全基础设施

  1.4 测试基础设施（1周）【保持不变】

  - ✅ 测试环境搭建
  - ✅ Instancio数据生成器集成

  1.5 集成测试与文档完善（1-2周）【新增】

  - ✅ 第一阶段功能集成测试
  - ✅ API文档生成
  - ✅ 数据库设计文档完善

● ---
  📋 数据库设计策略优化

  数据库分层设计原则

  第一层：核心基础表（第一阶段设计）

  -- 用户权限核心表
  users, user_profiles, roles, permissions
  -- 系统基础表
  system_configs, dictionaries, file_storages
  -- 审计日志表
  operation_logs, audit_logs

  第二层：业务功能表（按阶段设计）

  -- 第二阶段：认证权限表
  user_roles, refresh_tokens, login_history

  -- 第三阶段：VIP业务表
  vip_memberships, orders, payment_records

  -- 第四阶段：用户中心表
  favorites, download_history, user_comments

  第三层：高级功能表（按需设计）

  -- PT站点集成表
  pt_sites, torrent_files, crawl_tasks

  -- 质量管理表
  quality_scores, duplicate_detection

  -- 监控分析表
  search_logs, user_statistics

  数据库设计规范制定（第一阶段）

  1. 表结构设计规范

  - 命名规范：snake_case，复数形式
  - 通用字段：id, created_at, updated_at, deleted_at
  - 主键策略：BIGINT AUTO_INCREMENT
  - 时间字段：使用 datetime 类型，包含毫秒

  2. 索引设计指导原则

  - 主键索引：所有表必须有主键
  - 唯一索引：业务唯一性字段
  - 复合索引：常用查询组合字段
  - 外键索引：关联查询字段

  3. 数据库版本管理规范

  - Flyway脚本命名：V{major}.{minor}__Description.sql
  - 回滚脚本：Rollback_{major}.{minor}__Description.sql
  - 数据初始化：Data_{major}.{minor}__Table.sql

● ---
  📋 调整各阶段内容

  🔄 第二阶段调整

  2.1 认证权限数据库设计与实施（0.5周）

  保持现有，这是正确的业务功能表设计

  2.2 用户认证与权限系统实现（2周）

  修正依赖关系表述：
  依赖关系：
  - 依赖：认证权限数据库设计 ✓
  - 依赖：用户领域模型 ✓
  - 依赖：安全基础设施 ✓
  - 依赖：缓存基础设施（已在第一阶段完成）✓

  ❌ 移除：Redis缓存基础实施（2.4）

  原因：Redis缓存已在第一阶段的基础架构层完成

  ✅ 新增：缓存策略实施（1周）

  内容：
  - 用户会话缓存实施
  - 系统配置缓存实施
  - 缓存中间件集成
  - 前端缓存策略适配

  🔄 第三阶段调整

  保持现有结构，但优化时间安排：
  - VIP系统数据库设计：1周 → 0.5周（遵循增量设计原则）
  - 种子文件与PT站点数据库设计：保持0.5周
  - 其他数据库设计：保持0.5周

  🔄 第四阶段调整
