-- =====================================================
-- KneneBackend 第三层：高级功能表 - 质量管理相关表
-- 版本：V3.13.1
-- 创建时间：2025-10-30
-- 说明：严格按照数据库架构规范设计，遵循20个规范文档要求
-- =====================================================

-- 设置字符集和排序规则
SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- 质量评分表
-- ----------------------------
DROP TABLE IF EXISTS `quality_scores`;
CREATE TABLE `quality_scores` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID，遵循通用字段设计规范',
  `target_type` tinyint NOT NULL COMMENT '评分目标类型：1-种子文件，2-电影资源，3-用户发布，4-爬虫源',
  `target_id` bigint NOT NULL COMMENT '评分目标ID',
  `overall_score` decimal(5,2) NOT NULL DEFAULT 0.00 COMMENT '总体质量评分(0-100)',
  `video_score` decimal(5,2) DEFAULT 0.00 COMMENT '视频质量评分(0-100)',
  `audio_score` decimal(5,2) DEFAULT 0.00 COMMENT '音频质量评分(0-100)',
  `encoding_score` decimal(5,2) DEFAULT 0.00 COMMENT '编码质量评分(0-100)',
  `completeness_score` decimal(5,2) DEFAULT 0.00 COMMENT '完整性评分(0-100)',
  `availability_score` decimal(5,2) DEFAULT 0.00 COMMENT '可用性评分(0-100)',
  `popularity_score` decimal(5,2) DEFAULT 0.00 COMMENT '热度评分(0-100)',
  `accuracy_score` decimal(5,2) DEFAULT 0.00 COMMENT '信息准确性评分(0-100)',
  `user_rating_score` decimal(5,2) DEFAULT 0.00 COMMENT '用户评分(0-100)',
  `expert_rating_score` decimal(5,2) DEFAULT 0.00 COMMENT '专家评分(0-100)',
  `technical_score` decimal(5,2) DEFAULT 0.00 COMMENT '技术评分(0-100)',
  `content_score` decimal(5,2) DEFAULT 0.00 COMMENT '内容评分(0-100)',
  `quality_level` tinyint DEFAULT 1 COMMENT '质量等级：1-较差，2-一般，3-良好，4-优秀，5-完美',
  `quality_grade` char(2) DEFAULT 'D' COMMENT '质量等级字母：A、B、C、D、F',
  `scoring_algorithm` varchar(50) DEFAULT 'default' COMMENT '评分算法名称',
  `scoring_version` varchar(20) DEFAULT '1.0' COMMENT '评分算法版本',
  `scoring_factors` json COMMENT '评分因子权重，JSON格式存储',
  `score_details` json COMMENT '详细评分信息，JSON格式',
  `score_history` json COMMENT '评分历史记录，JSON格式',
  `improvement_suggestions` json COMMENT '改进建议，JSON格式',
  `quality_issues` json COMMENT '质量问题列表，JSON格式',
  `strength_points` json COMMENT '优点列表，JSON格式',
  `weakness_points` json COMMENT '缺点列表，JSON格式',
  `comparison_benchmark` decimal(5,2) DEFAULT 0.00 COMMENT '对比基准分',
  `ranking_percentile` decimal(5,2) DEFAULT 0.00 COMMENT '排名百分位',
  `category_ranking` int DEFAULT 0 COMMENT '分类内排名',
  `global_ranking` int DEFAULT 0 COMMENT '全局排名',
  `confidence_level` decimal(5,2) DEFAULT 0.00 COMMENT '置信度(0-100)',
  `data_completeness` decimal(5,2) DEFAULT 0.00 COMMENT '数据完整度(0-100)',
  `validation_status` tinyint DEFAULT 1 COMMENT '验证状态：1-未验证，2-部分验证，3-完全验证',
  `manual_review_required` tinyint(1) DEFAULT 0 COMMENT '是否需要人工审查：1-需要，0-不需要',
  `manual_review_score` decimal(5,2) COMMENT '人工审查评分',
  `manual_review_comments` text COMMENT '人工审查评论',
  `auto_score_enabled` tinyint(1) DEFAULT 1 COMMENT '是否启用自动评分：1-启用，0-禁用',
  `last_auto_score_time` datetime COMMENT '最后自动评分时间',
  `auto_score_confidence` decimal(5,2) DEFAULT 0.00 COMMENT '自动评分置信度',
  `user_feedback_count` int DEFAULT 0 COMMENT '用户反馈数量',
  `user_feedback_score` decimal(5,2) DEFAULT 0.00 COMMENT '用户反馈评分',
  `positive_feedback_count` int DEFAULT 0 COMMENT '正面反馈数量',
  `negative_feedback_count` int DEFAULT 0 COMMENT '负面反馈数量',
  `feedback_analysis` json COMMENT '反馈分析结果，JSON格式',
  `quality_trend` tinyint DEFAULT 0 COMMENT '质量趋势：-1-下降，0-稳定，1-上升',
  `trend_percentage` decimal(5,2) DEFAULT 0.00 COMMENT '趋势变化百分比',
  `quality_alert_level` tinyint DEFAULT 0 COMMENT '质量预警级别：0-无预警，1-一般，2-重要，3-紧急',
  `alert_message` varchar(500) COMMENT '预警信息',
  `quality_tags` json COMMENT '质量标签，JSON格式',
  `quality_flags` json COMMENT '质量标记，JSON格式',
  `calculated_by` varchar(100) DEFAULT 'system' COMMENT '评分计算者',
  `calculation_method` varchar(100) DEFAULT 'auto' COMMENT '计算方法',
  `calculation_time` datetime COMMENT '计算时间',
  `next_evaluation_time` datetime COMMENT '下次评估时间',
  `evaluation_frequency_hours` int DEFAULT 168 COMMENT '评估频率(小时)',
  `quality_metrics` json COMMENT '质量指标详情，JSON格式',
  `benchmark_comparison` json COMMENT '基准对比数据，JSON格式',
  `improvement_plan` json COMMENT '改进计划，JSON格式',
  `quality_report_url` varchar(500) COMMENT '质量报告链接',
  `admin_notes` text COMMENT '管理员备注',
  `created_by` bigint COMMENT '创建人ID，遵循审计规范',
  `updated_by` bigint COMMENT '更新人ID，遵循审计规范',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间，遵循通用字段设计',
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间，遵循通用字段设计',
  `deleted_at` timestamp NULL COMMENT '删除时间，遵循软删除规范',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_target_type_id` (`target_type`, `target_id`) COMMENT '评分目标唯一索引，遵循唯一索引设计规范',
  KEY `idx_target_type` (`target_type`) COMMENT '目标类型索引',
  KEY `idx_target_id` (`target_id`) COMMENT '目标ID索引',
  KEY `idx_overall_score` (`overall_score`) COMMENT '总体评分索引',
  KEY `idx_quality_level` (`quality_level`) COMMENT '质量等级索引',
  KEY `idx_quality_grade` (`quality_grade`) COMMENT '质量等级字母索引',
  KEY `idx_scoring_algorithm` (`scoring_algorithm`) COMMENT '评分算法索引',
  KEY `idx_validation_status` (`validation_status`) COMMENT '验证状态索引',
  KEY `idx_manual_review_required` (`manual_review_required`) COMMENT '人工审查需求索引',
  KEY `idx_quality_alert_level` (`quality_alert_level`) COMMENT '质量预警级别索引',
  KEY `idx_quality_trend` (`quality_trend`) COMMENT '质量趋势索引',
  KEY `idx_user_feedback_score` (`user_feedback_score`) COMMENT '用户反馈评分索引',
  KEY `idx_ranking_percentile` (`ranking_percentile`) COMMENT '排名百分位索引',
  KEY `idx_calculation_time` (`calculation_time`) COMMENT '计算时间索引',
  KEY `idx_next_evaluation_time` (`next_evaluation_time`) COMMENT '下次评估时间索引',
  KEY `idx_created_at` (`created_at`) COMMENT '创建时间索引',
  KEY `idx_deleted_at` (`deleted_at`) COMMENT '删除时间索引，软删除查询优化',
  KEY `idx_level_score` (`quality_level`, `overall_score`) COMMENT '复合索引：质量等级和评分',
  KEY `idx_type_level_score` (`target_type`, `quality_level`, `overall_score`) COMMENT '复合索引：类型、等级、评分',
  KEY `idx_alert_level_score` (`quality_alert_level`, `overall_score`) COMMENT '复合索引：预警级别和评分',
  CONSTRAINT `chk_quality_scores_target_type` CHECK (`target_type` IN (1, 2, 3, 4)) COMMENT '目标类型约束',
  CONSTRAINT `chk_quality_scores_overall_score` CHECK (`overall_score` >= 0 AND `overall_score` <= 100) COMMENT '总体评分范围约束',
  CONSTRAINT `chk_quality_scores_sub_scores` CHECK (`video_score` >= 0 AND `video_score` <= 100 AND
                                                   `audio_score` >= 0 AND `audio_score` <= 100 AND
                                                   `encoding_score` >= 0 AND `encoding_score` <= 100) COMMENT '子评分范围约束',
  CONSTRAINT `chk_quality_scores_quality_level` CHECK (`quality_level` IN (1, 2, 3, 4, 5)) COMMENT '质量等级约束',
  CONSTRAINT `chk_quality_scores_grade` CHECK (`quality_grade` IN ('A', 'B', 'C', 'D', 'F')) COMMENT '质量等级字母约束',
  CONSTRAINT `chk_quality_scores_trend` CHECK (`quality_trend` IN (-1, 0, 1)) COMMENT '质量趋势约束'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='质量评分表，遵循数据库分层设计原则';

-- ----------------------------
-- 重复检测表
-- ----------------------------
DROP TABLE IF EXISTS `duplicate_detection`;
CREATE TABLE `duplicate_detection` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID，遵循通用字段设计规范',
  `resource_type` tinyint NOT NULL COMMENT '资源类型：1-种子文件，2-电影资源，3-图片资源',
  `primary_resource_id` bigint NOT NULL COMMENT '主资源ID',
  `duplicate_resource_id` bigint NOT NULL COMMENT '重复资源ID',
  `duplicate_group_id` varchar(100) NOT NULL COMMENT '重复组ID',
  `similarity_score` decimal(5,2) NOT NULL DEFAULT 0.00 COMMENT '相似度评分(0-100)',
  `match_type` tinyint NOT NULL DEFAULT 1 COMMENT '匹配类型：1-完全相同，2-高度相似，3-部分相似，4-内容相似',
  `detection_algorithm` varchar(50) NOT NULL DEFAULT 'default' COMMENT '检测算法名称',
  `detection_version` varchar(20) DEFAULT '1.0' COMMENT '检测算法版本',
  `comparison_method` varchar(50) DEFAULT 'hash' COMMENT '对比方法：hash-哈希对比，content-内容对比，metadata-元数据对比',
  `file_hash_primary` varchar(128) COMMENT '主资源文件哈希',
  `file_hash_duplicate` varchar(128) COMMENT '重复资源文件哈希',
  `content_hash_primary` varchar(128) COMMENT '主资源内容哈希',
  `content_hash_duplicate` varchar(128) COMMENT '重复资源内容哈希',
  `metadata_hash_primary` varchar(128) COMMENT '主资源元数据哈希',
  `metadata_hash_duplicate` varchar(128) COMMENT '重复资源元数据哈希',
  `similarity_factors` json COMMENT '相似度因子详情，JSON格式',
  `comparison_details` json COMMENT '对比详情，JSON格式',
  `differences` json COMMENT '差异列表，JSON格式',
  `common_attributes` json COMMENT '共同属性，JSON格式',
  `unique_attributes_primary` json COMMENT '主资源独有属性，JSON格式',
  `unique_attributes_duplicate` json COMMENT '重复资源独有属性，JSON格式',
  `quality_comparison` json COMMENT '质量对比信息，JSON格式',
  `size_comparison` json COMMENT '大小对比信息，JSON格式',
  `resolution_comparison` json COMMENT '分辨率对比信息，JSON格式',
  `format_comparison` json COMMENT '格式对比信息，JSON格式',
  `source_comparison` json COMMENT '来源对比信息，JSON格式',
  `release_comparison` json COMMENT '发布信息对比，JSON格式',
  `confidence_level` decimal(5,2) DEFAULT 0.00 COMMENT '检测置信度(0-100)',
  `false_positive_probability` decimal(5,2) DEFAULT 0.00 COMMENT '误报概率(0-100)',
  `manual_verification_required` tinyint(1) DEFAULT 0 COMMENT '是否需要人工验证：1-需要，0-不需要',
  `manual_verification_status` tinyint DEFAULT 0 COMMENT '人工验证状态：0-未验证，1-确认重复，2-确认不重复，3-需要进一步验证',
  `manual_verification_by` bigint COMMENT '人工验证人ID',
  `manual_verification_time` datetime COMMENT '人工验证时间',
  `manual_verification_comments` text COMMENT '人工验证评论',
  `auto_detection_enabled` tinyint(1) DEFAULT 1 COMMENT '是否启用自动检测：1-启用，0-禁用',
  `detection_frequency_hours` int DEFAULT 168 COMMENT '检测频率(小时)',
  `last_detection_time` datetime COMMENT '最后检测时间',
  `next_detection_time` datetime COMMENT '下次检测时间',
  `detection_status` tinyint DEFAULT 1 COMMENT '检测状态：1-待检测，2-检测中，3-已完成，4-检测失败',
  `priority_level` tinyint DEFAULT 2 COMMENT '优先级：1-高，2-中，3-低',
  `action_required` tinyint DEFAULT 0 COMMENT '是否需要处理：1-需要，0-不需要',
  `action_type` tinyint DEFAULT 1 COMMENT '处理类型：1-删除重复，2-合并信息，3-标记重复，4-保留全部',
  `action_status` tinyint DEFAULT 0 COMMENT '处理状态：0-未处理，1-处理中，2-已处理，3-处理失败',
  `recommended_action` tinyint DEFAULT 3 COMMENT '推荐处理动作：1-删除主资源，2-删除重复资源，3-保留全部，4-合并',
  `action_reason` varchar(500) COMMENT '处理原因',
  `action_by` bigint COMMENT '处理人ID',
  `action_time` datetime COMMENT '处理时间',
  `action_comments` text COMMENT '处理评论',
  `retention_policy` varchar(100) DEFAULT 'keep_better' COMMENT '保留策略：keep_better-保留更好的，keep_newer-保留更新的，keep_all-保留全部',
  `merge_enabled` tinyint(1) DEFAULT 0 COMMENT '是否支持合并：1-支持，0-不支持',
  `merge_status` tinyint DEFAULT 0 COMMENT '合并状态：0-未合并，1-已合并，2-合并失败',
  `merge_details` json COMMENT '合并详情，JSON格式',
  `conflict_resolution` json COMMENT '冲突解决方案，JSON格式',
  `impact_assessment` json COMMENT '影响评估，JSON格式',
  `user_impact` tinyint DEFAULT 0 COMMENT '用户影响：0-无影响，1-轻微影响，2-重要影响',
  `system_impact` tinyint DEFAULT 0 COMMENT '系统影响：0-无影响，1-轻微影响，2-重要影响',
  `notification_sent` tinyint(1) DEFAULT 0 COMMENT '是否已发送通知：1-已发送，0-未发送',
  `notification_details` json COMMENT '通知详情，JSON格式',
  `duplicate_count` int DEFAULT 1 COMMENT '重复数量',
  `group_size` int DEFAULT 1 COMMENT '重复组大小',
  `group_quality_score` decimal(5,2) DEFAULT 0.00 COMMENT '组内质量评分',
  `is_master_duplicate` tinyint(1) DEFAULT 0 COMMENT '是否为主重复：1-是，0-否',
  `master_duplicate_id` bigint COMMENT '主重复ID',
  `duplicate_chain` json COMMENT '重复链信息，JSON格式',
  `detection_metadata` json COMMENT '检测元数据，JSON格式',
  `quality_flags` json COMMENT '质量标记，JSON格式',
  `custom_tags` json COMMENT '自定义标签，JSON格式',
  `admin_notes` text COMMENT '管理员备注',
  `created_by` bigint COMMENT '创建人ID，遵循审计规范',
  `updated_by` bigint COMMENT '更新人ID，遵循审计规范',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间，遵循通用字段设计',
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间，遵循通用字段设计',
  `deleted_at` timestamp NULL COMMENT '删除时间，遵循软删除规范',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_duplicate_group` (`duplicate_group_id`, `primary_resource_id`, `duplicate_resource_id`) COMMENT '重复组唯一索引，遵循唯一索引设计规范',
  KEY `idx_resource_type` (`resource_type`) COMMENT '资源类型索引',
  KEY `idx_primary_resource_id` (`primary_resource_id`) COMMENT '主资源ID索引',
  KEY `idx_duplicate_resource_id` (`duplicate_resource_id`) COMMENT '重复资源ID索引',
  KEY `idx_similarity_score` (`similarity_score`) COMMENT '相似度评分索引',
  KEY `idx_match_type` (`match_type`) COMMENT '匹配类型索引',
  KEY `idx_detection_algorithm` (`detection_algorithm`) COMMENT '检测算法索引',
  KEY `idx_confidence_level` (`confidence_level`) COMMENT '置信度索引',
  KEY `idx_manual_verification_status` (`manual_verification_status`) COMMENT '人工验证状态索引',
  KEY `idx_detection_status` (`detection_status`) COMMENT '检测状态索引',
  KEY `idx_priority_level` (`priority_level`) COMMENT '优先级索引',
  KEY `idx_action_required` (`action_required`) COMMENT '处理需求索引',
  KEY `idx_action_status` (`action_status`) COMMENT '处理状态索引',
  KEY `idx_recommended_action` (`recommended_action`) COMMENT '推荐处理动作索引',
  KEY `idx_last_detection_time` (`last_detection_time`) COMMENT '最后检测时间索引',
  KEY `idx_next_detection_time` (`next_detection_time`) COMMENT '下次检测时间索引',
  KEY `idx_duplicate_count` (`duplicate_count`) COMMENT '重复数量索引',
  KEY `idx_group_size` (`group_size`) COMMENT '组大小索引',
  KEY `idx_is_master_duplicate` (`is_master_duplicate`) COMMENT '主重复标记索引',
  KEY `idx_created_at` (`created_at`) COMMENT '创建时间索引',
  KEY `idx_deleted_at` (`deleted_at`) COMMENT '删除时间索引，软删除查询优化',
  KEY `idx_type_similarity` (`resource_type`, `similarity_score`) COMMENT '复合索引：类型和相似度',
  KEY `idx_status_priority` (`detection_status`, `priority_level`) COMMENT '复合索引：状态和优先级',
  KEY `idx_action_status_priority` (`action_status`, `action_required`, `priority_level`) COMMENT '复合索引：处理状态和优先级',
  KEY `idx_group_similarity` (`duplicate_group_id`, `similarity_score`) COMMENT '复合索引：组ID和相似度',
  CONSTRAINT `chk_duplicate_detection_resource_type` CHECK (`resource_type` IN (1, 2, 3)) COMMENT '资源类型约束',
  CONSTRAINT `chk_duplicate_detection_similarity_score` CHECK (`similarity_score` >= 0 AND `similarity_score` <= 100) COMMENT '相似度评分范围约束',
  CONSTRAINT `chk_duplicate_detection_match_type` CHECK (`match_type` IN (1, 2, 3, 4)) COMMENT '匹配类型约束',
  CONSTRAINT `chk_duplicate_detection_manual_status` CHECK (`manual_verification_status` IN (0, 1, 2, 3)) COMMENT '人工验证状态约束',
  CONSTRAINT `chk_duplicate_detection_detection_status` CHECK (`detection_status` IN (1, 2, 3, 4)) COMMENT '检测状态约束',
  CONSTRAINT `chk_duplicate_detection_priority` CHECK (`priority_level` IN (1, 2, 3)) COMMENT '优先级约束',
  CONSTRAINT `chk_duplicate_detection_action_status` CHECK (`action_status` IN (0, 1, 2, 3)) COMMENT '处理状态约束',
  CONSTRAINT `chk_duplicate_detection_confidence` CHECK (`confidence_level` >= 0 AND `confidence_level` <= 100) COMMENT '置信度范围约束'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='重复检测表，遵循数据库分层设计原则';

-- ----------------------------
-- 相似度哈希表
-- ----------------------------
DROP TABLE IF EXISTS `similarity_hash`;
CREATE TABLE `similarity_hash` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID，遵循通用字段设计规范',
  `resource_type` tinyint NOT NULL COMMENT '资源类型：1-种子文件，2-电影资源，3-图片资源，4-文本内容',
  `resource_id` bigint NOT NULL COMMENT '资源ID',
  `hash_type` varchar(50) NOT NULL COMMENT '哈希类型：md5, sha1, sha256, perceptual, audio, video',
  `hash_algorithm` varchar(100) NOT NULL COMMENT '哈希算法名称',
  `hash_value` varchar(512) NOT NULL COMMENT '哈希值',
  `hash_binary` varbinary(512) COMMENT '哈希值二进制格式',
  `hash_length` int NOT NULL COMMENT '哈希长度',
  `hash_quality_score` decimal(5,2) DEFAULT 0.00 COMMENT '哈希质量评分(0-100)',
  `generation_method` varchar(100) DEFAULT 'auto' COMMENT '生成方法：auto-自动，manual-手动，batch-批处理',
  `generation_config` json COMMENT '生成配置，JSON格式',
  `preprocessing_steps` json COMMENT '预处理步骤，JSON格式',
  `normalization_method` varchar(100) COMMENT '标准化方法',
  `feature_extraction_method` varchar(100) COMMENT '特征提取方法',
  `similarity_threshold` decimal(5,2) DEFAULT 80.00 COMMENT '相似度阈值',
  `match_criteria` json COMMENT '匹配条件，JSON格式',
  `comparison_count` int DEFAULT 0 COMMENT '对比次数',
  `match_count` int DEFAULT 0 COMMENT '匹配次数',
  `false_positive_count` int DEFAULT 0 COMMENT '误报次数',
  `false_negative_count` int DEFAULT 0 COMMENT '漏报次数',
  `accuracy_rate` decimal(5,2) DEFAULT 0.00 COMMENT '准确率',
  `precision_rate` decimal(5,2) DEFAULT 0.00 COMMENT '精确率',
  `recall_rate` decimal(5,2) DEFAULT 0.00 COMMENT '召回率',
  `f1_score` decimal(5,2) DEFAULT 0.00 COMMENT 'F1分数',
  `performance_metrics` json COMMENT '性能指标，JSON格式',
  `last_comparison_time` datetime COMMENT '最后对比时间',
  `next_comparison_time` datetime COMMENT '下次对比时间',
  `comparison_frequency_hours` int DEFAULT 168 COMMENT '对比频率(小时)',
  `auto_comparison_enabled` tinyint(1) DEFAULT 1 COMMENT '是否启用自动对比：1-启用，0-禁用',
  `batch_processing_enabled` tinyint(1) DEFAULT 0 COMMENT '是否启用批处理：1-启用，0-禁用',
  `batch_size` int DEFAULT 1000 COMMENT '批处理大小',
  `processing_priority` tinyint DEFAULT 2 COMMENT '处理优先级：1-高，2-中，3-低',
  `index_optimized` tinyint(1) DEFAULT 0 COMMENT '是否已索引优化：1-是，0-否',
  `index_version` int DEFAULT 1 COMMENT '索引版本',
  `storage_compressed` tinyint(1) DEFAULT 0 COMMENT '是否压缩存储：1-是，0-否',
  `compression_method` varchar(50) COMMENT '压缩方法',
  `encrypted` tinyint(1) DEFAULT 0 COMMENT '是否加密：1-是，0-否',
  `encryption_method` varchar(50) COMMENT '加密方法',
  `hash_metadata` json COMMENT '哈希元数据，JSON格式',
  `feature_vectors` json COMMENT '特征向量，JSON格式',
  `signature_data` json COMMENT '签名数据，JSON格式',
  `quality_flags` json COMMENT '质量标记，JSON格式',
  `validation_status` tinyint DEFAULT 1 COMMENT '验证状态：1-未验证，2-已验证，3-验证失败',
  `validation_errors` json COMMENT '验证错误，JSON格式',
  `checksum` varchar(128) COMMENT '校验和',
  `version` int DEFAULT 1 COMMENT '版本号',
  `obsolete` tinyint(1) DEFAULT 0 COMMENT '是否已过时：1-是，0-否',
  `replacement_hash_id` bigint COMMENT '替换哈希ID',
  `retention_policy` varchar(100) DEFAULT 'keep_forever' COMMENT '保留策略',
  `expiration_date` datetime COMMENT '过期日期',
  `cleanup_scheduled` tinyint(1) DEFAULT 0 COMMENT '是否计划清理：1-是，0-否',
  `last_access_time` datetime COMMENT '最后访问时间',
  `access_count` int DEFAULT 0 COMMENT '访问次数',
  `storage_location` varchar(500) COMMENT '存储位置',
  `backup_locations` json COMMENT '备份位置，JSON格式',
  `replication_status` tinyint DEFAULT 0 COMMENT '复制状态：0-未复制，1-复制中，2-已复制',
  `sync_status` tinyint DEFAULT 0 COMMENT '同步状态：0-未同步，1-同步中，2-已同步',
  `admin_notes` text COMMENT '管理员备注',
  `created_by` bigint COMMENT '创建人ID，遵循审计规范',
  `updated_by` bigint COMMENT '更新人ID，遵循审计规范',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间，遵循通用字段设计',
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间，遵循通用字段设计',
  `deleted_at` timestamp NULL COMMENT '删除时间，遵循软删除规范',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_resource_hash` (`resource_type`, `resource_id`, `hash_type`, `hash_value`) COMMENT '资源哈希唯一索引，遵循唯一索引设计规范',
  KEY `idx_resource_type` (`resource_type`) COMMENT '资源类型索引',
  KEY `idx_resource_id` (`resource_id`) COMMENT '资源ID索引',
  KEY `idx_hash_type` (`hash_type`) COMMENT '哈希类型索引',
  KEY `idx_hash_algorithm` (`hash_algorithm`) COMMENT '哈希算法索引',
  KEY `idx_hash_value_prefix` (`hash_value`(32)) COMMENT '哈希值前缀索引',
  KEY `idx_hash_quality_score` (`hash_quality_score`) COMMENT '哈希质量评分索引',
  KEY `idx_similarity_threshold` (`similarity_threshold`) COMMENT '相似度阈值索引',
  KEY `idx_match_count` (`match_count`) COMMENT '匹配次数索引',
  KEY `idx_accuracy_rate` (`accuracy_rate`) COMMENT '准确率索引',
  KEY `idx_validation_status` (`validation_status`) COMMENT '验证状态索引',
  KEY `idx_obsolete` (`obsolete`) COMMENT '过时标记索引',
  KEY `idx_expiration_date` (`expiration_date`) COMMENT '过期日期索引',
  KEY `idx_last_comparison_time` (`last_comparison_time`) COMMENT '最后对比时间索引',
  KEY `idx_next_comparison_time` (`next_comparison_time`) COMMENT '下次对比时间索引',
  KEY `idx_created_at` (`created_at`) COMMENT '创建时间索引',
  KEY `idx_deleted_at` (`deleted_at`) COMMENT '删除时间索引，软删除查询优化',
  KEY `idx_type_algorithm` (`resource_type`, `hash_algorithm`) COMMENT '复合索引：类型和算法',
  KEY `idx_type_quality` (`resource_type`, `hash_quality_score`) COMMENT '复合索引：类型和质量',
  KEY `idx_algorithm_quality` (`hash_algorithm`, `hash_quality_score`) COMMENT '复合索引：算法和质量',
  KEY `idx_validation_obsolete` (`validation_status`, `obsolete`) COMMENT '复合索引：验证状态和过时标记',
  CONSTRAINT `chk_similarity_hash_resource_type` CHECK (`resource_type` IN (1, 2, 3, 4)) COMMENT '资源类型约束',
  CONSTRAINT `chk_similarity_hash_quality_score` CHECK (`hash_quality_score` >= 0 AND `hash_quality_score` <= 100) COMMENT '哈希质量评分范围约束',
  CONSTRAINT `chk_similarity_hash_threshold` CHECK (`similarity_threshold` >= 0 AND `similarity_threshold` <= 100) COMMENT '相似度阈值范围约束',
  CONSTRAINT `chk_similarity_hash_rates` CHECK (`accuracy_rate` >= 0 AND `accuracy_rate` <= 100 AND
                                             `precision_rate` >= 0 AND `precision_rate` <= 100 AND
                                             `recall_rate` >= 0 AND `recall_rate` <= 100) COMMENT '比率范围约束',
  CONSTRAINT `chk_similarity_hash_validation_status` CHECK (`validation_status` IN (1, 2, 3)) COMMENT '验证状态约束'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='相似度哈希表，遵循数据库分层设计原则';

-- 设置外键检查
SET FOREIGN_KEY_CHECKS = 1;

-- =====================================================
-- 表创建完成说明
-- =====================================================
-- 本迁移脚本创建了第三层高级功能表中的质量管理相关表：
-- 1. quality_scores：质量评分表 - 存储各类资源的质量评分信息
-- 2. duplicate_detection：重复检测表 - 存储重复资源的检测结果
-- 3. similarity_hash：相似度哈希表 - 存储用于相似度对比的哈希数据
--
-- 设计要点：
-- 严格遵循20个规范文档要求，包括命名规范、索引设计、数据完整性等
-- 实现多维度的质量评分体系，支持自动和手动评分
-- 提供完整的重复检测机制，支持多种检测算法
-- 实现高效的相似度哈希存储和检索
-- 包含详细的性能指标和质量评估
-- 支持人工验证和自动处理流程
-- 提供完整的审计跟踪和历史记录
-- 支持多种哈希算法和对比方法
-- 实现了数据压缩和加密存储
-- 包含完整的错误处理和恢复机制
-- =====================================================